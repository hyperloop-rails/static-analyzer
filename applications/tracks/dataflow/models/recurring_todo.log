SET IRMethod, name = active instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = completed instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = active instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = completed instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = active instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = completed instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = pattern_specific_validations instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->pattern def_%v_4 %self[2.0,] 	 SYMBOL:	 ARGS:
		 2: %v_4->validate def_%v_5 %v_4[3.1,] 	 SYMBOL:	 ARGS:
		 3: RETURN %v_5[3.2,] %self[3.1,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->errors def_%v_6 %self[2.0,] 	 SYMBOL:	 ARGS:
		 2: %v_6->[] def_%v_7 %v_6[4.1,] 	 SYMBOL:recurring_todo,	 ARGS:Symbol,
		 3: COPY TYPE_StringLiteral "Invalid recurrence period '" def_%v_8 
		 4: %self->recurring_period def_%v_9 %self[4.1,2.0,] 	 SYMBOL:	 ARGS:
		 5: COPY TYPE_StringLiteral "'" def_%v_10 
		 6: BUILDSTRING def_%v_11 %v_8[4.3,] %v_9[4.4,] %v_10[4.5,] 
		 7: %v_7-><< def_%v_12 %v_7[4.2,] %v_11[4.6,] 	 SYMBOL:	 ARGS:%v_11,
		 8: RETURN %v_12[4.7,] %self[4.1,4.4,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = valid_period? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "daily" def_%v_3 
		 7: COPY TYPE_StringLiteral "weekly" def_%v_4 
		 8: COPY TYPE_StringLiteral "monthly" def_%v_5 
		 9: COPY TYPE_StringLiteral "yearly" def_%v_6 
		 10: COPY TYPE_Array def_%v_7 %v_3[2.6,] %v_4[2.7,] %v_5[2.8,] %v_6[2.9,] 
		 11: %self->recurring_period def_%v_8 %self[2.0,] 	 SYMBOL:	 ARGS:
		 12: %v_7->include? def_%v_9 %v_7[2.10,] %v_8[2.11,] 	 SYMBOL:	 ARGS:%v_8,
		 13: RETURN %v_9[2.12,] %self[2.0,2.11,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = period_validation instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->valid_period? def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_4 
		 1: RETURN %v_4[3.0,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: %self->errors def_%v_5 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_StringLiteral "is an unknown recurrence pattern: '" def_%v_6 
		 2: %self->recurring_period def_%v_7 %self[4.0,2.0,] 	 SYMBOL:	 ARGS:
		 3: COPY TYPE_StringLiteral "'" def_%v_8 
		 4: BUILDSTRING def_%v_9 %v_6[4.1,] %v_7[4.2,] %v_8[4.3,] 
		 5: %v_5->add def_%v_10 %v_5[4.0,] %v_9[4.4,] 	 SYMBOL:recurring_period,	 ARGS:Symbol,%v_9,
		 6: RETURN %v_10[4.5,] %self[4.0,4.2,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = pattern instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->valid_period? def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 5 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "RecurringTodos::" def_%v_4 
		 2: %self->recurring_period def_%v_5 %self[2.0,] 	 SYMBOL:	 ARGS:
		 3: %v_5->capitalize def_%v_6 %v_5[3.2,] 	 SYMBOL:	 ARGS:
		 4: COPY TYPE_StringLiteral "RecurrencePattern.new(user)" def_%v_7 
		 5: BUILDSTRING def_%v_8 %v_4[3.1,] %v_6[3.3,] %v_7[3.4,] 
		 6: %self->eval def_%v_9 %self[3.2,2.0,] %v_8[3.5,] 	 SYMBOL:	 ARGS:%v_8,
		 7: ATTRASSIGN %self->pattern %v_9[3.6,] 
		 8: 
		 9: GETFIELD %self->pattern def_%v_10 %self[3.2,3.6,3.7,2.0,] 
		 10: %v_10->build_from_recurring_todo def_%v_11 %v_10[3.9,] %self[3.2,3.6,3.7,2.0,] 	 SYMBOL:	 ARGS:%self,
		 11: 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_11 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: GETFIELD %self->pattern def_%v_12 %self[3.7,2.0,] 
		 2: RETURN %v_12[5.1,] %self[3.7,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = recurrence_pattern instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->recurrence_pattern def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: RETURN %v_4[2.7,] %self[2.0,2.6,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = recurring_target_as_text instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->recurring_target_as_text def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: RETURN %v_4[2.7,] %self[2.0,2.6,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = starred? instanceMethod = true
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: (Todo) def_%v_3 
		 7: (inherit STARRED_TAG_NAME) def_%v_4 %v_3[2.6,] 
		 8: %v_4[2.7,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %v_3->const_missing def_%v_4 %v_3[2.6,] 	 SYMBOL:STARRED_TAG_NAME,	 ARGS:Symbol,
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: %self->has_tag? def_%v_5 %self[2.0,] %v_4[3.0,2.7,] 	 SYMBOL:	 ARGS:%v_4,
		 1: RETURN %v_5[4.0,] %self[4.0,2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = get_due_date instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_previous 
		 6: 
		 7: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 8: %v_3->get_due_date def_%v_4 %v_3[2.7,] previous[2.5,] 	 SYMBOL:	 ARGS:previous,
		 9: RETURN %v_4[2.8,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = get_show_from_date instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_previous 
		 6: 
		 7: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 8: %v_3->get_show_from_date def_%v_4 %v_3[2.7,] previous[2.5,] 	 SYMBOL:	 ARGS:previous,
		 9: RETURN %v_4[2.8,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = done? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_end_date 
		 6: 
		 7: %self->continues_recurring? def_%v_3 %self[2.0,] end_date[2.5,] 	 SYMBOL:	 ARGS:end_date,
		 8: %v_3->! def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: RETURN %v_4[2.8,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = toggle_completion! instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->completed? def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: %self->activate! def_%v_4 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: RETURN %v_4[3.0,] %self[3.0,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: %self->complete! def_%v_5 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: RETURN %v_5[4.0,] %self[4.0,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = toggle_star! instanceMethod = true
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 6 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->starred? def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 4 5 
	datadep: 
	instructions:
		 0: 
		 1: (Todo) def_%v_4 
		 2: (inherit STARRED_TAG_NAME) def_%v_5 %v_4[3.1,] 
		 3: %v_5[3.2,] 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: %v_4->const_missing def_%v_5 %v_4[3.1,] 	 SYMBOL:STARRED_TAG_NAME,	 ARGS:Symbol,
BB 5
	outgoing: 9 
	datadep: 
	instructions:
		 0: %self->_remove_tags def_%v_6 %self[2.0,] %v_5[4.0,3.2,] 	 SYMBOL:	 ARGS:%v_5,
		 1: 
BB 6
	outgoing: 7 8 
	datadep: 
	instructions:
		 0: 
		 1: (Todo) def_%v_7 
		 2: (inherit STARRED_TAG_NAME) def_%v_8 %v_7[6.1,] 
		 3: %v_8[6.2,] 
BB 7
	outgoing: 8 
	datadep: 
	instructions:
		 0: %v_7->const_missing def_%v_8 %v_7[6.1,] 	 SYMBOL:STARRED_TAG_NAME,	 ARGS:Symbol,
BB 8
	outgoing: 9 
	datadep: 
	instructions:
		 0: %self->_add_tags def_%v_9 %self[2.0,] %v_8[7.0,6.2,] 	 SYMBOL:	 ARGS:%v_8,
		 1: COPY TYPE_PASS def_%v_6 %v_9[8.0,] 
BB 9
	outgoing: 10 
	datadep: 
	instructions:
		 0: 
		 1: %self->tags def_%v_10 %self[2.0,] 	 SYMBOL:	 ARGS:
		 2: %v_10->reload def_%v_11 %v_10[9.1,] 	 SYMBOL:	 ARGS:
		 3: 
		 4: %self->starred? def_%v_12 %self[9.1,2.0,] 	 SYMBOL:	 ARGS:
		 5: RETURN %v_12[9.4,] %self[9.1,9.4,2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = remove_from_project! instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: ATTRASSIGN %self->project 
		 7: 
		 8: %self->save def_%v_3 %self[2.0,2.6,] 	 SYMBOL:	 ARGS:
		 9: RETURN %v_3[2.8,] %self[2.0,2.6,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = clear_todos_association instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->todos def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->nil? def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: BRANCH %v_4[2.7,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_5 
		 1: RETURN %v_5[3.0,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->todos def_%v_6 %self[2.0,] 	 SYMBOL:	 ARGS:
		 2: %v_6->each def_%v_7 %v_6[4.1,] %self[4.1,2.0,] 	 SYMBOL:	 ARGS:%v_6,
CLOSURE BEGIN: t[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_t 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: ATTRASSIGN t->recurring_todo 
		 2: 
		 3: t->save def_%cl_1_3 t[3.1,2.2,] 	 SYMBOL:	 ARGS:
		 4: RETURN %cl_1_3[3.3,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 3: RETURN %v_7[4.2,] %self[4.1,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = increment_occurrences instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->occurrences_count def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->+ def_%v_5 %v_3[2.6,] 	 SYMBOL:	 ARGS:Fixnum,
		 8: %self->occurrences_count= def_%v_4 %v_5[2.7,] 	 SYMBOL:	 ARGS:%v_5,
		 9: 
		 10: %self->save def_%v_6 %self[2.0,2.6,2.8,] 	 SYMBOL:	 ARGS:
		 11: RETURN %v_6[2.10,] %self[2.0,2.6,2.8,2.10,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = continues_recurring? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_previous 
		 6: 
		 7: %self->pattern def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 8: %v_3->continues_recurring? def_%v_4 %v_3[2.7,] previous[2.5,] 	 SYMBOL:	 ARGS:previous,
		 9: RETURN %v_4[2.8,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

