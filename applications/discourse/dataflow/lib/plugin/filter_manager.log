SET IRMethod, name = initialize instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: HASH- def_%v_3 
		 7: ATTRASSIGN %self->map %v_3[2.6,] 
		 8: RETURN %v_3[2.6,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = register instanceMethod = true
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_name 
		 6: def_%v_3 
		 7: def_blk %v_3[2.6,] 
		 8: 
		 9: COPY TYPE_PASS def_%v_4 blk[2.7,] 
		 10: BRANCH blk[2.7,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: blk->arity def_%v_5 blk[2.7,] 	 SYMBOL:	 ARGS:
		 1: %v_5->== def_%v_6 %v_5[3.0,] 	 SYMBOL:	 ARGS:Fixnum,
		 2: COPY TYPE_PASS def_%v_4 %v_6[3.1,] 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: BRANCH %v_4[3.2,2.9,] 
BB 5
	outgoing: 7 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_7 
		 1: 
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: (ArgumentException) def_%v_8 
		 1: %self->raise def_%v_9 %self[2.0,] %v_8[6.0,] 	 SYMBOL:	 ARGS:%v_8,
		 2: COPY TYPE_PASS def_%v_7 %v_9[6.1,] 
BB 7
	outgoing: 8 9 
	datadep: 
	instructions:
		 0: 
		 1: GETFIELD %self->map def_%v_10 %self[2.0,] 
		 2: %v_10->[] def_%v_11 %v_10[7.1,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 3: BRANCH %v_11[7.2,] 
BB 8
	outgoing: 9 
	datadep: 
	instructions:
		 0: COPY TYPE_Array def_%v_12 
		 1: %v_10->[]= def_%v_11 %v_10[7.1,] name[2.5,] %v_12[8.0,] 	 SYMBOL:	 ARGS:name,%v_12,
		 2: COPY TYPE_PASS def_%v_11 %v_12[8.0,] 
BB 9
	outgoing: 10 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_filters %v_11[8.1,8.2,7.2,] 
		 1: 
		 2: %v_11-><< def_%v_13 %v_11[8.1,8.2,7.2,] blk[2.7,] 	 SYMBOL:	 ARGS:blk,
		 3: RETURN %v_13[9.2,] %self[2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = apply instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_name 
		 6: RECEIVEARG def_context 
		 7: RECEIVEARG def_result 
		 8: 
		 9: GETFIELD %self->map def_%v_3 %self[2.0,] 
		 10: %v_3->[] def_%v_4 %v_3[2.9,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 11: COPY TYPE_PASS def_filters %v_4[2.10,] 
		 12: BRANCH %v_4[2.10,] 
BB 3
	outgoing: 5 
	datadep: 
	instructions:
		 0: 
		 1: filters->each def_%v_5 filters[2.11,] %self[2.0,] 	 SYMBOL:	 ARGS:filters,
CLOSURE BEGIN: blk[] context[2.6,] result[2.7,] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_blk 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: blk->call def_%cl_1_3 blk[2.2,] context[] result[] 	 SYMBOL:	 ARGS:context,result,
		 2: COPY TYPE_PASS def_result %cl_1_3[3.1,] 
		 3: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: result[3.2,] 
		 2: 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_5 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: RETURN result[3.1,2.7,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

