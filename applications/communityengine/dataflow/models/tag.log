SET IRMethod, name = most_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count desc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = least_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count asc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = most_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count desc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = least_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count asc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = most_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count desc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = least_used instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: COPY TYPE_StringLiteral "taggings_count asc" def_%v_3 
		 7: %self->order def_%v_4 %self[2.0,] %v_3[2.6,] 	 SYMBOL:	 ARGS:%v_3,
		 8: %self->limit def_%v_5 %self[2.0,2.7,] 	 SYMBOL:	 ARGS:
		 9: %v_4->limit def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.7,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = validates_name_uniqueness? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: RETURN %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = named instanceMethod = false
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_name 
		 6: 
		 7: (ActsAsTaggableOn) def_%v_3 
		 8: %v_3->strict_case_match def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "name = " def_%v_5 
		 2: %self->binary def_%v_6 %self[2.0,] 	 SYMBOL:	 ARGS:
		 3: COPY TYPE_StringLiteral "?" def_%v_7 
		 4: BUILDSTRING def_%v_8 %v_5[3.1,] %v_6[3.2,] %v_7[3.3,] 
		 5: %self->as_8bit_ascii def_%v_9 %self[3.2,2.0,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 6: COPY TYPE_Array def_%v_10 %v_8[3.4,] %v_9[3.5,] 
		 7: %self->where def_%v_11 %self[3.2,3.5,2.0,] %v_10[3.6,] 	 SYMBOL:	 ARGS:%v_10,
		 8: RETURN %v_11[3.7,] %self[3.2,3.5,3.7,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "LOWER(name) = LOWER(?)" def_%v_12 
		 2: %self->unicode_downcase def_%v_13 %self[2.0,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 3: %self->as_8bit_ascii def_%v_14 %self[4.2,2.0,] %v_13[4.2,] 	 SYMBOL:	 ARGS:%v_13,
		 4: COPY TYPE_Array def_%v_15 %v_12[4.1,] %v_14[4.3,] 
		 5: %self->where def_%v_16 %self[4.2,4.3,2.0,] %v_15[4.4,] 	 SYMBOL:	 ARGS:%v_15,
		 6: RETURN %v_16[4.5,] %self[4.2,4.3,4.5,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = named_any instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_list 
		 6: 
		 7: list->map def_%v_3 list[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:list,
CLOSURE BEGIN: %self[2.0,] tag[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_tag 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->sanitize_sql_for_named_any def_%cl_1_3 %self[2.0,] tag[2.2,] 	 SYMBOL:	 ARGS:tag,
		 2: COPY TYPE_StringLiteral "BINARY" def_%cl_1_4 
		 3: %cl_1_3->force_encoding def_%cl_1_5 %cl_1_3[3.1,] %cl_1_4[3.2,] 	 SYMBOL:	 ARGS:%cl_1_4,
		 4: RETURN %cl_1_5[3.3,] %self[3.1,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_6 
		 1: def_%cl_1_7 %cl_1_6[4.0,] 
		 2: RETURN %cl_1_7[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 8: COPY TYPE_StringLiteral " OR " def_%v_4 
		 9: %v_3->join def_%v_5 %v_3[2.7,] %v_4[2.8,] 	 SYMBOL:	 ARGS:%v_4,
		 10: COPY TYPE_PASS def_clause %v_5[2.9,] 
		 11: 
		 12: %self->where def_%v_6 %self[2.0,] %v_5[2.9,] 	 SYMBOL:	 ARGS:clause,
		 13: RETURN %v_6[2.12,] %self[2.0,2.12,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = named_like instanceMethod = false
BB 1
	outgoing: 7 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_name 
		 6: 
		 7: COPY TYPE_StringLiteral "name " def_%v_3 
		 8: (ActsAsTaggableOn) def_%v_4 
		 9: (inherit Utils) def_%v_5 %v_4[2.8,] 
		 10: %v_5[2.9,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %v_4->const_missing def_%v_5 %v_4[2.8,] 	 SYMBOL:Utils,	 ARGS:Symbol,
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: %v_5->like_operator def_%v_6 %v_5[3.0,2.9,] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_StringLiteral " ? ESCAPE '!'" def_%v_7 
		 2: BUILDSTRING def_%v_8 %v_3[2.7,] %v_6[4.0,] %v_7[4.1,] 
		 3: COPY TYPE_StringLiteral "%" def_%v_9 
		 4: (ActsAsTaggableOn) def_%v_10 
		 5: (inherit Utils) def_%v_11 %v_10[4.4,] 
		 6: %v_11[4.5,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: %v_10->const_missing def_%v_11 %v_10[4.4,] 	 SYMBOL:Utils,	 ARGS:Symbol,
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: %v_11->escape_like def_%v_12 %v_11[5.0,4.5,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 1: COPY TYPE_StringLiteral "%" def_%v_13 
		 2: BUILDSTRING def_%v_14 %v_9[4.3,] %v_12[6.0,] %v_13[6.1,] 
		 3: COPY TYPE_Array def_%v_15 %v_8[4.2,] %v_14[6.2,] 
		 4: COPY TYPE_PASS def_clause %v_15[6.3,] 
		 5: 
		 6: %self->where def_%v_16 %self[2.0,] %v_15[6.3,] 	 SYMBOL:	 ARGS:clause,
		 7: RETURN %v_16[6.6,] %self[6.6,2.0,] 
BB 7
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = named_like_any instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_list 
		 6: 
		 7: list->map def_%v_3 list[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:list,
CLOSURE BEGIN: tag[] %self[2.0,] 
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_tag 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 8 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "name " def_%cl_1_3 
		 2: (ActsAsTaggableOn) def_%cl_1_4 
		 3: (inherit Utils) def_%cl_1_5 %cl_1_4[3.2,] 
		 4: %cl_1_5[3.3,] 
BB 4
	outgoing: 5 8 
	datadep: 
	instructions:
		 0: %cl_1_4->const_missing def_%cl_1_5 %cl_1_4[3.2,] 	 SYMBOL:Utils,	 ARGS:Symbol,
BB 5
	outgoing: 6 7 8 
	datadep: 
	instructions:
		 0: %cl_1_5->like_operator def_%cl_1_6 %cl_1_5[4.0,3.3,] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_StringLiteral " ? ESCAPE '!'" def_%cl_1_7 
		 2: BUILDSTRING def_%cl_1_8 %cl_1_3[3.1,] %cl_1_6[5.0,] %cl_1_7[5.1,] 
		 3: COPY TYPE_StringLiteral "%" def_%cl_1_9 
		 4: (ActsAsTaggableOn) def_%cl_1_10 
		 5: (inherit Utils) def_%cl_1_11 %cl_1_10[5.4,] 
		 6: %cl_1_11[5.5,] 
BB 6
	outgoing: 7 8 
	datadep: 
	instructions:
		 0: %cl_1_10->const_missing def_%cl_1_11 %cl_1_10[5.4,] 	 SYMBOL:Utils,	 ARGS:Symbol,
BB 7
	outgoing: 8 10 
	datadep: 
	instructions:
		 0: tag->to_s def_%cl_1_12 tag[2.2,] 	 SYMBOL:	 ARGS:
		 1: %cl_1_11->escape_like def_%cl_1_13 %cl_1_11[6.0,5.5,] %cl_1_12[7.0,] 	 SYMBOL:	 ARGS:%cl_1_12,
		 2: COPY TYPE_StringLiteral "%" def_%cl_1_14 
		 3: BUILDSTRING def_%cl_1_15 %cl_1_9[5.3,] %cl_1_13[7.1,] %cl_1_14[7.2,] 
		 4: COPY TYPE_Array def_%cl_1_16 %cl_1_8[5.2,] %cl_1_15[7.3,] 
		 5: %self->sanitize_sql def_%cl_1_17 %self[2.0,] %cl_1_16[7.4,] 	 SYMBOL:	 ARGS:%cl_1_16,
		 6: RETURN %cl_1_17[7.5,] %self[7.5,2.0,] 
BB 8
	outgoing: 10 
	datadep: 
	instructions:
		 0: def_%cl_1_18 
		 1: def_%cl_1_19 %cl_1_18[8.0,] 
		 2: RETURN %cl_1_19[8.1,] %self[2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 8: COPY TYPE_StringLiteral " OR " def_%v_4 
		 9: %v_3->join def_%v_5 %v_3[2.7,] %v_4[2.8,] 	 SYMBOL:	 ARGS:%v_4,
		 10: COPY TYPE_PASS def_clause %v_5[2.9,] 
		 11: 
		 12: %self->where def_%v_6 %self[2.0,] %v_5[2.9,] 	 SYMBOL:	 ARGS:clause,
		 13: RETURN %v_6[2.12,] %self[2.0,2.12,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = for_context instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_context 
		 6: 
		 7: %self->joins def_%v_3 %self[2.0,] 	 SYMBOL:taggings,	 ARGS:Symbol,
		 8: COPY TYPE_StringLiteral "taggings.context = ?" def_%v_4 
		 9: COPY TYPE_Array def_%v_5 %v_4[2.8,] context[2.5,] 
		 10: %v_3->where def_%v_6 %v_3[2.7,] %v_5[2.9,] 	 SYMBOL:	 ARGS:%v_5,
		 11: COPY TYPE_StringLiteral "DISTINCT tags.*" def_%v_7 
		 12: %v_6->select def_%v_8 %v_6[2.10,] %v_7[2.11,] 	 SYMBOL:	 ARGS:%v_7,
		 13: RETURN %v_8[2.12,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = find_or_create_with_like_by_name instanceMethod = false
BB 1
	outgoing: 8 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_name 
		 6: 
		 7: (ActsAsTaggableOn) def_%v_3 
		 8: %v_3->strict_case_match def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 8 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_Array def_%v_5 name[2.5,] 
		 2: %self->find_or_create_all_with_like_by_name def_%v_6 %self[2.0,] %v_5[3.1,] 	 SYMBOL:	 ARGS:%v_5,
		 3: %v_6->first def_%v_7 %v_6[3.2,] 	 SYMBOL:	 ARGS:
		 4: RETURN %v_7[3.3,] %self[3.2,2.0,] 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->named_like def_%v_8 %self[2.0,] name[2.5,] 	 SYMBOL:	 ARGS:name,
		 2: %v_8->first def_%v_9 %v_8[4.1,] 	 SYMBOL:	 ARGS:
		 3: BRANCH %v_9[4.2,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: HASH-name- def_%v_10 name[2.5,] 
		 1: %self->create def_%v_11 %self[2.0,] %v_10[5.0,] 	 SYMBOL:	 ARGS:%v_10,
		 2: COPY TYPE_PASS def_%v_9 %v_11[5.1,] 
BB 6
	outgoing: 8 
	datadep: 
	instructions:
		 0: RETURN %v_9[5.2,4.2,] %self[2.0,] 
BB 8
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = find_or_create_all_with_like_by_name instanceMethod = false
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_list 
		 6: 
		 7: %self->Array def_%v_3 %self[2.0,] list[2.5,] 	 SYMBOL:	 ARGS:list,
		 8: %v_3->flatten def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: COPY TYPE_PASS def_list %v_4[2.8,] 
		 10: 
		 11: %v_4->empty? def_%v_5 %v_4[2.8,] 	 SYMBOL:	 ARGS:
		 12: BRANCH %v_5[2.11,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Array def_%v_6 
		 1: RETURN %v_6[3.0,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_7 
		 1: 
		 2: %self->named_any def_%v_8 %self[2.0,] list[2.5,2.9,] 	 SYMBOL:	 ARGS:list,
		 3: COPY TYPE_PASS def_existing_tags %v_8[4.2,] 
		 4: 
		 5: list->map def_%v_9 list[2.5,2.9,] %self[4.2,2.0,] 	 SYMBOL:	 ARGS:list,
CLOSURE BEGIN: %self[4.2,2.0,] tag_name[] existing_tags[4.3,] tag[] comparable_tag_name[] existing_tag[] 
BB 1
	outgoing: 19 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_tag_name 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 17 
	datadep: 
	instructions:
		 0: 
		 1: %self->comparable_name def_%cl_1_3 %self[2.0,] tag_name[2.2,] 	 SYMBOL:	 ARGS:tag_name,
		 2: COPY TYPE_PASS def_comparable_tag_name %cl_1_3[3.1,] 
		 3: 
		 4: existing_tags->find def_%cl_1_4 existing_tags[] %self[3.1,2.0,] 	 SYMBOL:	 ARGS:existing_tags,
CLOSURE BEGIN: tag[] %self[3.1,2.0,] comparable_tag_name[3.2,] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_2_0 
		 2: RECEIVEARG def_tag 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: tag->name def_%cl_2_3 tag[2.2,] 	 SYMBOL:	 ARGS:
		 2: %self->comparable_name def_%cl_2_4 %self[2.0,] %cl_2_3[3.1,] 	 SYMBOL:	 ARGS:%cl_2_3,
		 3: %cl_2_4->== def_%cl_2_5 %cl_2_4[3.2,] comparable_tag_name[] 	 SYMBOL:	 ARGS:comparable_tag_name,
		 4: RETURN %cl_2_5[3.3,] %self[3.2,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_2_6 
		 1: def_%cl_2_7 %cl_2_6[4.0,] 
		 2: RETURN %cl_2_7[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 5: COPY TYPE_PASS def_existing_tag %cl_1_4[3.4,] 
		 6: 
		 7: GLOBALVAR $! def_%cl_1_5 
BB 4
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: 
		 1: 
		 2: COPY TYPE_PASS def_%cl_1_8 existing_tag[3.5,] 
		 3: BRANCH existing_tag[3.5,] 
BB 6
	outgoing: 7 9 
	datadep: 
	instructions:
		 0: HASH-name- def_%cl_1_9 tag_name[2.2,] 
		 1: %self->create def_%cl_1_10 %self[2.0,] %cl_1_9[6.0,] 	 SYMBOL:	 ARGS:%cl_1_9,
		 2: COPY TYPE_PASS def_%cl_1_8 %cl_1_10[6.1,] 
BB 7
	outgoing: 8 9 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_%cl_1_7 %cl_1_8[6.2,4.2,] 
		 1: %cl_1_5[3.7,] 
BB 8
	outgoing: 16 
	datadep: 
	instructions:
		 0: 
BB 9
	outgoing: 10 11 15 
	datadep: 
	instructions:
		 0: def_%cl_1_11 
		 1: (ActiveRecord) def_%cl_1_12 
		 2: (inherit RecordNotUnique) def_%cl_1_13 %cl_1_12[9.1,] 
		 3: %cl_1_13[9.2,] 
BB 10
	outgoing: 11 15 
	datadep: 
	instructions:
		 0: %cl_1_12->const_missing def_%cl_1_13 %cl_1_12[9.1,] 	 SYMBOL:RecordNotUnique,	 ARGS:Symbol,
BB 11
	outgoing: 12 13 15 
	datadep: 
	instructions:
		 0: def_%cl_1_14 %cl_1_13[10.0,9.2,] %cl_1_11[9.0,] 
		 1: BRANCH %cl_1_14[11.0,] 
BB 12
	outgoing: 15 19 
	datadep: 
	instructions:
		 0: %cl_1_11[9.0,] 
BB 13
	outgoing: 14 15 
	datadep: 
	instructions:
		 0: 
		 1: (DuplicateTagError) def_%cl_1_15 
		 2: COPY TYPE_StringLiteral "'" def_%cl_1_16 
		 3: COPY TYPE_StringLiteral "' has already been taken" def_%cl_1_17 
		 4: BUILDSTRING def_%cl_1_18 %cl_1_16[13.2,] tag_name[2.2,] %cl_1_17[13.3,] 
		 5: %cl_1_15->new def_%cl_1_19 %cl_1_15[13.1,] %cl_1_18[13.4,] 	 SYMBOL:	 ARGS:%cl_1_18,
		 6: %self->raise def_%cl_1_20 %self[2.0,] %cl_1_19[13.5,] 	 SYMBOL:	 ARGS:%cl_1_19,
		 7: COPY TYPE_PASS def_%cl_1_7 %cl_1_20[13.6,] 
		 8: %cl_1_5[3.7,] 
BB 14
	outgoing: 16 
	datadep: 
	instructions:
		 0: 
BB 15
	outgoing: 17 19 
	datadep: 
	instructions:
		 0: def_%cl_1_21 
		 1: def_%cl_1_22 %cl_1_21[15.0,] %cl_1_5[3.7,] 
		 2: %cl_1_21[15.0,] 
BB 16
	outgoing: 19 
	datadep: 
	instructions:
		 0: RETURN %cl_1_7[7.0,13.7,] %self[2.0,] 
BB 17
	outgoing: 19 
	datadep: 
	instructions:
		 0: def_%cl_1_23 
		 1: def_%cl_1_24 %cl_1_23[17.0,] 
		 2: RETURN %cl_1_24[17.1,] %self[2.0,] 
BB 19
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: comparable_tag_name[3.2,] existing_tag[3.5,] 
		 6: RETURN %v_9[4.5,] %self[4.2,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = == instanceMethod = true
BB 1
	outgoing: 7 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 6 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_object 
		 6: 
		 7: %self->super def_%v_3 object[2.5,] %v_0[2.1,] 	 SYMBOL:	 ARGS:object,
		 8: BRANCH %v_3[2.7,] 
BB 3
	outgoing: 4 5 
	datadep: 
	instructions:
		 0: (Tag) def_%v_4 
		 1: object->is_a? def_%v_5 object[2.5,] %v_4[3.0,] 	 SYMBOL:	 ARGS:%v_4,
		 2: BRANCH %v_5[3.1,] 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: %self->name def_%v_6 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: object->name def_%v_7 object[2.5,] 	 SYMBOL:	 ARGS:
		 2: %v_6->== def_%v_8 %v_6[4.0,] %v_7[4.1,] 	 SYMBOL:	 ARGS:%v_7,
		 3: COPY TYPE_PASS def_%v_5 %v_8[4.2,] 
BB 5
	outgoing: 7 
	datadep: 
	instructions:
		 0: RETURN %v_5[4.3,3.1,] %self[2.0,] 
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: RETURN %v_3[2.7,] %self[2.0,] 
BB 7
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = to_s instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->name def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: RETURN %v_3[2.6,] %self[2.0,2.6,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = count instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->read_attribute def_%v_3 %self[2.0,] 	 SYMBOL:count,	 ARGS:Symbol,
		 7: %v_3->to_i def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: RETURN %v_4[2.7,] %self[2.0,2.6,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = comparable_name instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: 
		 7: (ActsAsTaggableOn) def_%v_3 
		 8: %v_3->strict_case_match def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_PASS def_%v_5 str[2.5,] 
		 2: RETURN str[2.5,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: str->to_s def_%v_6 str[2.5,] 	 SYMBOL:	 ARGS:
		 2: %self->unicode_downcase def_%v_7 %self[2.0,] %v_6[4.1,] 	 SYMBOL:	 ARGS:%v_6,
		 3: RETURN %v_7[4.2,] %self[4.2,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = binary instanceMethod = true
BB 1
	outgoing: 8 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: (ActsAsTaggableOn) def_%v_3 
		 7: (inherit Utils) def_%v_4 %v_3[2.6,] 
		 8: %v_4[2.7,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %v_3->const_missing def_%v_4 %v_3[2.6,] 	 SYMBOL:Utils,	 ARGS:Symbol,
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: %v_4->using_mysql? def_%v_5 %v_4[3.0,2.7,] 	 SYMBOL:	 ARGS:
		 1: BRANCH %v_5[4.0,] 
BB 5
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_StringLiteral "BINARY " def_%v_6 
		 1: RETURN %v_6[5.0,] %self[2.0,] 
BB 6
	outgoing: 8 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 8
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = unicode_downcase instanceMethod = true
BB 1
	outgoing: 18 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_string 
		 6: 
		 7: (ActiveSupport) def_%v_3 
		 8: (inherit Multibyte) def_%v_4 %v_3[2.7,] 
		 9: %v_4[2.8,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %v_3->const_missing def_%v_4 %v_3[2.7,] 	 SYMBOL:Multibyte,	 ARGS:Symbol,
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: (inherit Unicode) def_%v_5 %v_4[3.0,2.8,] 
		 1: %v_5[4.0,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: %v_4->const_missing def_%v_5 %v_4[3.0,2.8,] 	 SYMBOL:Unicode,	 ARGS:Symbol,
BB 6
	outgoing: 7 12 
	datadep: 
	instructions:
		 0: %v_5->respond_to? def_%v_6 %v_5[5.0,4.0,] 	 SYMBOL:downcase,	 ARGS:Symbol,
		 1: BRANCH %v_6[6.0,] 
BB 7
	outgoing: 8 9 
	datadep: 
	instructions:
		 0: 
		 1: (ActiveSupport) def_%v_7 
		 2: (inherit Multibyte) def_%v_8 %v_7[7.1,] 
		 3: %v_8[7.2,] 
BB 8
	outgoing: 9 
	datadep: 
	instructions:
		 0: %v_7->const_missing def_%v_8 %v_7[7.1,] 	 SYMBOL:Multibyte,	 ARGS:Symbol,
BB 9
	outgoing: 10 11 
	datadep: 
	instructions:
		 0: (inherit Unicode) def_%v_9 %v_8[8.0,7.2,] 
		 1: %v_9[9.0,] 
BB 10
	outgoing: 11 
	datadep: 
	instructions:
		 0: %v_8->const_missing def_%v_9 %v_8[8.0,7.2,] 	 SYMBOL:Unicode,	 ARGS:Symbol,
BB 11
	outgoing: 18 
	datadep: 
	instructions:
		 0: %v_9->downcase def_%v_10 %v_9[10.0,9.0,] string[2.5,] 	 SYMBOL:	 ARGS:string,
		 1: RETURN %v_10[11.0,] %self[2.0,] 
BB 12
	outgoing: 13 14 
	datadep: 
	instructions:
		 0: 
		 1: (ActiveSupport) def_%v_11 
		 2: (inherit Multibyte) def_%v_12 %v_11[12.1,] 
		 3: %v_12[12.2,] 
BB 13
	outgoing: 14 
	datadep: 
	instructions:
		 0: %v_11->const_missing def_%v_12 %v_11[12.1,] 	 SYMBOL:Multibyte,	 ARGS:Symbol,
BB 14
	outgoing: 15 16 
	datadep: 
	instructions:
		 0: (inherit Chars) def_%v_13 %v_12[13.0,12.2,] 
		 1: %v_13[14.0,] 
BB 15
	outgoing: 16 
	datadep: 
	instructions:
		 0: %v_12->const_missing def_%v_13 %v_12[13.0,12.2,] 	 SYMBOL:Chars,	 ARGS:Symbol,
BB 16
	outgoing: 18 
	datadep: 
	instructions:
		 0: %v_13->new def_%v_14 %v_13[15.0,14.0,] string[2.5,] 	 SYMBOL:	 ARGS:string,
		 1: %v_14->downcase def_%v_15 %v_14[16.0,] 	 SYMBOL:	 ARGS:
		 2: %v_15->to_s def_%v_16 %v_15[16.1,] 	 SYMBOL:	 ARGS:
		 3: RETURN %v_16[16.2,] %self[2.0,] 
BB 18
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = as_8bit_ascii instanceMethod = true
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 5 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_string 
		 6: 
		 7: def_%v_3 
		 8: %v_3[2.7,] 
BB 3
	outgoing: 4 5 
	datadep: 
	instructions:
		 0: (inherit Encoding) def_%v_3 
		 1: %v_3[3.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_3 
		 1: 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_FrozenString frozen:"constant" def_%v_3 
BB 6
	outgoing: 7 8 
	datadep: 
	instructions:
		 0: BRANCH %v_3[5.0,4.0,] 
BB 7
	outgoing: 10 
	datadep: 
	instructions:
		 0: 
		 1: string->to_s def_%v_4 string[2.5,] 	 SYMBOL:	 ARGS:
		 2: %v_4->dup def_%v_5 %v_4[7.1,] 	 SYMBOL:	 ARGS:
		 3: COPY TYPE_StringLiteral "BINARY" def_%v_6 
		 4: %v_5->force_encoding def_%v_7 %v_5[7.2,] %v_6[7.3,] 	 SYMBOL:	 ARGS:%v_6,
		 5: RETURN %v_7[7.4,] %self[2.0,] 
BB 8
	outgoing: 10 
	datadep: 
	instructions:
		 0: 
		 1: string->to_s def_%v_8 string[2.5,] 	 SYMBOL:	 ARGS:
		 2: %v_8->mb_chars def_%v_9 %v_8[8.1,] 	 SYMBOL:	 ARGS:
		 3: RETURN %v_9[8.2,] %self[2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = sanitize_sql_for_named_any instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_tag 
		 6: 
		 7: (ActsAsTaggableOn) def_%v_3 
		 8: %v_3->strict_case_match def_%v_4 %v_3[2.7,] 	 SYMBOL:	 ARGS:
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "name = " def_%v_5 
		 2: %self->binary def_%v_6 %self[2.0,] 	 SYMBOL:	 ARGS:
		 3: COPY TYPE_StringLiteral "?" def_%v_7 
		 4: BUILDSTRING def_%v_8 %v_5[3.1,] %v_6[3.2,] %v_7[3.3,] 
		 5: %self->as_8bit_ascii def_%v_9 %self[3.2,2.0,] tag[2.5,] 	 SYMBOL:	 ARGS:tag,
		 6: COPY TYPE_Array def_%v_10 %v_8[3.4,] %v_9[3.5,] 
		 7: %self->sanitize_sql def_%v_11 %self[3.2,3.5,2.0,] %v_10[3.6,] 	 SYMBOL:	 ARGS:%v_10,
		 8: RETURN %v_11[3.7,] %self[3.2,3.5,3.7,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "LOWER(name) = LOWER(?)" def_%v_12 
		 2: %self->unicode_downcase def_%v_13 %self[2.0,] tag[2.5,] 	 SYMBOL:	 ARGS:tag,
		 3: %self->as_8bit_ascii def_%v_14 %self[4.2,2.0,] %v_13[4.2,] 	 SYMBOL:	 ARGS:%v_13,
		 4: COPY TYPE_Array def_%v_15 %v_12[4.1,] %v_14[4.3,] 
		 5: %self->sanitize_sql def_%v_16 %self[4.2,4.3,2.0,] %v_15[4.4,] 	 SYMBOL:	 ARGS:%v_15,
		 6: RETURN %v_16[4.5,] %self[4.2,4.3,4.5,2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

