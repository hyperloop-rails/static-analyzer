SET IRMethod, name = trim_and_hide instanceMethod = true
BB 1
	outgoing: 7 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str_to_hide 
		 6: RECEIVECONSTARG def_num_visible 
		 7: num_visible[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Fixnum def_num_visible 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_PASS def_%v_3 str_to_hide[2.5,] 
		 2: BRANCH str_to_hide[2.5,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_StringLiteral "" def_%v_4 
		 1: COPY TYPE_PASS def_%v_3 %v_4[5.0,] 
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: %v_3->strip def_%v_5 %v_3[5.1,4.1,] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_PASS def_trimmed %v_5[6.0,] 
		 2: 
		 3: %v_5->length def_%v_6 %v_5[6.0,] 	 SYMBOL:	 ARGS:
		 4: %v_6->- def_%v_7 %v_6[6.3,] 	 SYMBOL:	 ARGS:Fixnum,
		 5: %v_7->- def_%v_8 %v_7[6.4,] num_visible[3.0,2.6,] 	 SYMBOL:	 ARGS:num_visible,
		 6: COPY TYPE_PASS def_asterisks %v_8[6.5,] 
		 7: 
		 8: CONSTANT def_%v_9 %v_8[6.5,] 
		 9: COPY TYPE_StringLiteral "" def_%v_10 
		 10: %v_9->inject def_%v_11 %v_9[6.8,] %v_10[6.9,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_10,%v_9,
CLOSURE BEGIN: a[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_a 
		 3: RECEIVEARG def__ 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "*" def_%cl_1_3 
		 2: a->+ def_%cl_1_4 a[2.2,] %cl_1_3[3.1,] 	 SYMBOL:	 ARGS:%cl_1_3,
		 3: RETURN %cl_1_4[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[4.0,] 
		 2: RETURN %cl_1_6[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: _[2.3,] 
		 11: trimmed->last def_%v_12 trimmed[6.1,] num_visible[3.0,2.6,] 	 SYMBOL:	 ARGS:num_visible,
		 12: %v_11->+ def_%v_13 %v_11[6.10,] %v_12[6.11,] 	 SYMBOL:	 ARGS:%v_12,
		 13: RETURN %v_13[6.12,] %self[2.0,] 
BB 7
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = first_words instanceMethod = true
BB 1
	outgoing: 8 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: RECEIVECONSTARG def_word_count 
		 7: word_count[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Fixnum def_word_count 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: 
		 1: str->nil? def_%v_3 str[2.5,] 	 SYMBOL:	 ARGS:
		 2: BRANCH %v_3[4.1,] 
BB 5
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_StringLiteral "" def_%v_4 
		 1: RETURN %v_4[5.0,] %self[2.0,] 
BB 6
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_StringLiteral " " def_%v_5 
		 1: str->split def_%v_6 str[2.5,] %v_5[6.0,] 	 SYMBOL:	 ARGS:%v_5,
		 2: %v_6->take def_%v_7 %v_6[6.1,] word_count[3.0,2.6,] 	 SYMBOL:	 ARGS:word_count,
		 3: COPY TYPE_StringLiteral " " def_%v_8 
		 4: %v_7->join def_%v_9 %v_7[6.2,] %v_8[6.3,] 	 SYMBOL:	 ARGS:%v_8,
		 5: RETURN %v_9[6.4,] %self[2.0,] 
BB 8
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = strip_small_words instanceMethod = true
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: RECEIVECONSTARG def_min_letter_count 
		 7: min_letter_count[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Fixnum def_min_letter_count 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral " " def_%v_3 
		 2: str->split def_%v_4 str[2.5,] %v_3[4.1,] 	 SYMBOL:	 ARGS:%v_3,
		 3: %v_4->select def_%v_5 %v_4[4.2,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_4,
CLOSURE BEGIN: %self[2.0,] word[] min_letter_count[3.0,2.6,] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_word 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->strip_punctuation def_%cl_1_3 %self[2.0,] word[2.2,] 	 SYMBOL:	 ARGS:word,
		 2: %cl_1_3->length def_%cl_1_4 %cl_1_3[3.1,] 	 SYMBOL:	 ARGS:
		 3: %cl_1_4->> def_%cl_1_5 %cl_1_4[3.2,] min_letter_count[] 	 SYMBOL:	 ARGS:min_letter_count,
		 4: RETURN %cl_1_5[3.3,] %self[3.1,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_6 
		 1: def_%cl_1_7 %cl_1_6[4.0,] 
		 2: RETURN %cl_1_7[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 4: COPY TYPE_StringLiteral " " def_%v_6 
		 5: %v_5->join def_%v_7 %v_5[4.3,] %v_6[4.4,] 	 SYMBOL:	 ARGS:%v_6,
		 6: RETURN %v_7[4.5,] %self[2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = strip_punctuation instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: 
		 7: COPY TYPE_Regexp def_%v_3 
		 8: COPY TYPE_StringLiteral "" def_%v_4 
		 9: str->gsub def_%v_5 str[2.5,] %v_4[2.8,] 	 SYMBOL:	 ARGS:%v_3,%v_4,
		 10: RETURN %v_5[2.9,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = strip_nbsp instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: 
		 7: COPY TYPE_StringLiteral "&nbsp;" def_%v_3 
		 8: COPY TYPE_StringLiteral "" def_%v_4 
		 9: str->gsub def_%v_5 str[2.5,] %v_3[2.7,] %v_4[2.8,] 	 SYMBOL:	 ARGS:%v_3,%v_4,
		 10: RETURN %v_5[2.9,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = keywords instanceMethod = true
BB 1
	outgoing: 7 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: RECEIVECONSTARG def_word_count 
		 7: word_count[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Fixnum def_word_count 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: RECEIVECONSTARG def_min_letter_count 
		 1: min_letter_count[4.0,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Fixnum def_min_letter_count 
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: 
		 1: %self->strip_nbsp def_%v_3 %self[2.0,] str[2.5,] 	 SYMBOL:	 ARGS:str,
		 2: %self->strip_small_words def_%v_4 %self[6.1,2.0,] %v_3[6.1,] min_letter_count[5.0,4.0,] 	 SYMBOL:	 ARGS:%v_3,min_letter_count,
		 3: %self->first_words def_%v_5 %self[6.1,6.2,2.0,] %v_4[6.2,] word_count[3.0,2.6,] 	 SYMBOL:	 ARGS:%v_4,word_count,
		 4: %self->strip_punctuation def_%v_6 %self[6.1,6.2,6.3,2.0,] %v_5[6.3,] 	 SYMBOL:	 ARGS:%v_5,
		 5: %v_6->downcase def_%v_7 %v_6[6.4,] 	 SYMBOL:	 ARGS:
		 6: COPY TYPE_StringLiteral " " def_%v_8 
		 7: %v_7->split def_%v_9 %v_7[6.5,] %v_8[6.6,] 	 SYMBOL:	 ARGS:%v_8,
		 8: COPY TYPE_StringLiteral ", " def_%v_10 
		 9: %v_9->join def_%v_11 %v_9[6.7,] %v_10[6.8,] 	 SYMBOL:	 ARGS:%v_10,
		 10: RETURN %v_11[6.9,] %self[6.1,6.2,6.3,6.4,2.0,] 
BB 7
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = is_numeric? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_str 
		 6: 
		 7: COPY TYPE_Regexp def_%v_3 
		 8: str->match def_%v_4 str[2.5,] 	 SYMBOL:	 ARGS:%v_3,
		 9: %v_4->! def_%v_5 %v_4[2.8,] 	 SYMBOL:	 ARGS:
		 10: %v_5->! def_%v_6 %v_5[2.9,] 	 SYMBOL:	 ARGS:
		 11: RETURN %v_6[2.10,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

