SET IRMethod, name = compact instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: 
		 7: h->reject def_%v_3 h[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:h,
CLOSURE BEGIN: v[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_k 
		 3: RECEIVEARG def_v 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: v->nil? def_%cl_1_3 v[2.3,] 	 SYMBOL:	 ARGS:
		 2: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.3,] 
		 8: RETURN %v_3[2.7,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = camelize_keys instanceMethod = true
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: RECEIVECONSTARG def_deep 
		 7: deep[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Boolean def_deep 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: 
		 1: HASH- def_%v_3 
		 2: h->inject def_%v_4 h[2.5,] %v_3[4.1,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_3,h,
CLOSURE BEGIN: k[] deep[3.0,2.6,] v[] %self[2.0,] memo[] 
BB 1
	outgoing: 11 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 9 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_memo 
		 3: RECEIVEARG def_%cl_1_1 
		 4: def_%cl_1_2 %cl_1_1[2.3,] 
		 5: def_k %cl_1_2[2.4,] 
		 6: def_v %cl_1_2[2.4,] 
		 7: COPY TYPE_CurrentScope def_%current_scope 
		 8: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 9 
	datadep: 
	instructions:
		 0: 
		 1: k->to_s def_%cl_1_5 k[2.5,] 	 SYMBOL:	 ARGS:
		 2: %cl_1_5->camelize def_%cl_1_6 %cl_1_5[3.1,] 	 SYMBOL:lower,	 ARGS:Symbol,
		 3: %cl_1_6->to_sym def_%cl_1_7 %cl_1_6[3.2,] 	 SYMBOL:	 ARGS:
		 4: COPY TYPE_PASS def_%cl_1_8 deep[] 
		 5: BRANCH deep[] 
BB 4
	outgoing: 5 9 
	datadep: 
	instructions:
		 0: (Hash) def_%cl_1_9 
		 1: v->is_a? def_%cl_1_10 v[2.6,] %cl_1_9[4.0,] 	 SYMBOL:	 ARGS:%cl_1_9,
		 2: COPY TYPE_PASS def_%cl_1_8 %cl_1_10[4.1,] 
BB 5
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: BRANCH %cl_1_8[4.2,3.4,] 
BB 6
	outgoing: 8 9 
	datadep: 
	instructions:
		 0: %self->camelize_keys def_%cl_1_11 %self[2.0,] v[2.6,] 	 SYMBOL:	 ARGS:v,
		 1: 
BB 7
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_%cl_1_11 v[2.6,] 
BB 8
	outgoing: 9 11 
	datadep: 
	instructions:
		 0: ATTRASSIGN memo->[] %cl_1_7[3.3,] %cl_1_11[7.0,6.0,] 
		 1: 
		 2: RETURN memo[8.0,2.2,] %self[2.0,] 
BB 9
	outgoing: 11 
	datadep: 
	instructions:
		 0: def_%cl_1_12 
		 1: def_%cl_1_13 %cl_1_12[9.0,] 
		 2: RETURN %cl_1_13[9.1,] %self[2.0,] 
BB 11
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.6,] k[2.5,] 
		 3: RETURN %v_4[4.2,] %self[2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = select_by_key_regexp instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: RECEIVEARG def_regexp 
		 7: 
		 8: h->select def_%v_3 h[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:h,
CLOSURE BEGIN: key[] regexp[2.6,] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_key 
		 3: RECEIVEARG def_value 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: key->to_s def_%cl_1_3 key[2.2,] 	 SYMBOL:	 ARGS:
		 2: %cl_1_3->match def_%cl_1_4 %cl_1_3[3.1,] regexp[] 	 SYMBOL:	 ARGS:regexp,
		 3: RETURN %cl_1_4[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[4.0,] 
		 2: RETURN %cl_1_6[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: value[2.3,] 
		 9: RETURN %v_3[2.8,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = map_values instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: def_%v_3 
		 7: def_block %v_3[2.6,] 
		 8: 
		 9: HASH- def_%v_4 
		 10: h->inject def_%v_5 h[2.5,] %v_4[2.9,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_4,h,
CLOSURE BEGIN: block[2.7,] v[] memo[] k[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_memo 
		 3: RECEIVEARG def_%cl_1_1 
		 4: def_%cl_1_2 %cl_1_1[2.3,] 
		 5: def_k %cl_1_2[2.4,] 
		 6: def_v %cl_1_2[2.4,] 
		 7: COPY TYPE_CurrentScope def_%current_scope 
		 8: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: block->call def_%cl_1_5 block[] v[2.6,] 	 SYMBOL:	 ARGS:v,
		 2: ATTRASSIGN memo->[] k[2.5,] %cl_1_5[3.1,] 
		 3: 
		 4: RETURN memo[3.2,2.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_6 
		 1: def_%cl_1_7 %cl_1_6[4.0,] 
		 2: RETURN %cl_1_7[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.6,] k[2.5,] 
		 11: RETURN %v_5[2.10,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = rename_keys instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_renames 
		 6: RECEIVEARG def_hash 
		 7: 
		 8: %self->map_keys def_%v_3 %self[2.0,] hash[2.6,] %self[2.0,] 	 SYMBOL:	 ARGS:hash,%self,
CLOSURE BEGIN: renames[2.5,] old_key[] 
BB 1
	outgoing: 8 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_old_key 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 6 
	datadep: 
	instructions:
		 0: 
		 1: renames->[] def_%cl_1_3 renames[] old_key[2.2,] 	 SYMBOL:	 ARGS:old_key,
		 2: BRANCH %cl_1_3[3.1,] 
BB 4
	outgoing: 8 
	datadep: 
	instructions:
		 0: RETURN old_key[2.2,] %self[2.0,] 
BB 5
	outgoing: 8 
	datadep: 
	instructions:
		 0: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 6
	outgoing: 8 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[6.0,] 
		 2: RETURN %cl_1_5[6.1,] %self[2.0,] 
BB 8
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 9: RETURN %v_3[2.8,] %self[2.0,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = symbolize_keys instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: 
		 7: %self->map_keys def_%v_3 %self[2.0,] h[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:h,%self,
CLOSURE BEGIN: k[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_k 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: k->to_sym def_%cl_1_3 k[2.2,] 	 SYMBOL:	 ARGS:
		 2: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 8: RETURN %v_3[2.7,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = stringify_keys instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: 
		 7: %self->map_keys def_%v_3 %self[2.0,] h[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:h,%self,
CLOSURE BEGIN: k[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_k 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: k->to_s def_%cl_1_3 k[2.2,] 	 SYMBOL:	 ARGS:
		 2: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 8: RETURN %v_3[2.7,] %self[2.0,2.7,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = map_keys instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: def_%v_3 
		 7: def_block %v_3[2.6,] 
		 8: 
		 9: (Hash) def_%v_4 
		 10: h->map def_%v_5 h[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:h,
CLOSURE BEGIN: block[2.7,] k[] v[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_%cl_1_1 
		 3: def_%cl_1_2 %cl_1_1[2.2,] 
		 4: def_k %cl_1_2[2.3,] 
		 5: def_v %cl_1_2[2.3,] 
		 6: COPY TYPE_CurrentScope def_%current_scope 
		 7: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: block->call def_%cl_1_5 block[] k[2.4,] 	 SYMBOL:	 ARGS:k,
		 2: COPY TYPE_Array def_%cl_1_6 %cl_1_5[3.1,] v[2.5,] 
		 3: RETURN %cl_1_6[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_7 
		 1: def_%cl_1_8 %cl_1_7[4.0,] 
		 2: RETURN %cl_1_8[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.5,] 
		 11: %v_4->[] def_%v_6 %v_4[2.9,] %v_5[2.10,] 	 SYMBOL:	 ARGS:%v_5,
		 12: RETURN %v_6[2.11,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = pluck instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_array_of_hashes 
		 6: RECEIVEARG def_keys 
		 7: 
		 8: array_of_hashes->map def_%v_3 array_of_hashes[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:array_of_hashes,
CLOSURE BEGIN: keys[2.6,] %self[2.0,] h[] key[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_h 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: keys->map def_%cl_1_3 keys[] %self[2.0,] 	 SYMBOL:	 ARGS:keys,
CLOSURE BEGIN: h[2.2,] key[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_2_0 
		 2: RECEIVEARG def_key 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: h->[] def_%cl_2_3 h[] key[2.2,] 	 SYMBOL:	 ARGS:key,
		 2: RETURN %cl_2_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_2_4 
		 1: def_%cl_2_5 %cl_2_4[4.0,] 
		 2: RETURN %cl_2_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 2: RETURN %cl_1_3[3.1,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_4 
		 1: def_%cl_1_5 %cl_1_4[4.0,] 
		 2: RETURN %cl_1_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 9: %v_3->flatten def_%v_4 %v_3[2.8,] 	 SYMBOL:	 ARGS:
		 10: %v_4->compact def_%v_5 %v_4[2.9,] 	 SYMBOL:	 ARGS:
		 11: RETURN %v_5[2.10,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = sub instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: RECEIVEARG def_keys 
		 7: 
		 8: HASH- def_%v_3 
		 9: keys->reduce def_%v_4 keys[2.6,] %v_3[2.8,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_3,keys,
CLOSURE BEGIN: h[2.5,] k[] sub_hash[] 
BB 1
	outgoing: 9 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_sub_hash 
		 3: RECEIVEARG def_k 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 7 
	datadep: 
	instructions:
		 0: 
		 1: h->has_key? def_%cl_1_3 h[] k[2.3,] 	 SYMBOL:	 ARGS:k,
		 2: BRANCH %cl_1_3[3.1,] 
BB 4
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: h->[] def_%cl_1_4 h[] k[2.3,] 	 SYMBOL:	 ARGS:k,
		 1: ATTRASSIGN sub_hash->[] k[2.3,] %cl_1_4[4.0,] 
		 2: 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%cl_1_4 
BB 6
	outgoing: 9 
	datadep: 
	instructions:
		 0: 
		 1: RETURN sub_hash[4.1,2.2,] %self[2.0,] 
BB 7
	outgoing: 9 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[7.0,] 
		 2: RETURN %cl_1_6[7.1,] %self[2.0,] 
BB 9
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: k[2.3,] 
		 10: RETURN %v_4[2.9,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = sub_eq instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_a 
		 6: RECEIVEARG def_b 
		 7: RECEIVEARG def_keys 
		 8: 
		 9: def_%v_3 keys[2.7,] 
		 10: a->slice def_%v_4 a[2.5,] %v_3[2.9,] 	 SYMBOL:	 ARGS:Splat,
		 11: def_%v_5 keys[2.7,] 
		 12: b->slice def_%v_6 b[2.6,] %v_5[2.11,] 	 SYMBOL:	 ARGS:Splat,
		 13: %v_4->== def_%v_7 %v_4[2.10,] %v_6[2.12,] 	 SYMBOL:	 ARGS:%v_6,
		 14: RETURN %v_7[2.13,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = deep_contains instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_needle 
		 6: RECEIVEARG def_haystack 
		 7: 
		 8: needle->all? def_%v_3 needle[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:needle,
CLOSURE BEGIN: haystack[2.6,] key[] val[] haystack_val[] %self[2.0,] 
BB 1
	outgoing: 11 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_key 
		 3: RECEIVEARG def_val 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 9 
	datadep: 
	instructions:
		 0: 
		 1: haystack->[] def_%cl_1_3 haystack[] key[2.2,] 	 SYMBOL:	 ARGS:key,
		 2: COPY TYPE_PASS def_haystack_val %cl_1_3[3.1,] 
		 3: 
		 4: (Hash) def_%cl_1_4 
		 5: val->is_a? def_%cl_1_5 val[2.3,] %cl_1_4[3.4,] 	 SYMBOL:	 ARGS:%cl_1_4,
		 6: BRANCH %cl_1_5[3.5,] 
BB 4
	outgoing: 5 9 
	datadep: 
	instructions:
		 0: (Hash) def_%cl_1_6 
		 1: haystack_val->is_a? def_%cl_1_7 haystack_val[3.2,] %cl_1_6[4.0,] 	 SYMBOL:	 ARGS:%cl_1_6,
		 2: COPY TYPE_PASS def_%cl_1_5 %cl_1_7[4.1,] 
BB 5
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: BRANCH %cl_1_5[4.2,3.5,] 
BB 6
	outgoing: 8 9 
	datadep: 
	instructions:
		 0: 
		 1: %self->deep_contains def_%cl_1_8 %self[2.0,] val[2.3,] haystack_val[3.2,] 	 SYMBOL:	 ARGS:val,haystack_val,
		 2: 
BB 7
	outgoing: 9 11 
	datadep: 
	instructions:
		 0: 
		 1: val->== def_%cl_1_9 val[2.3,] haystack_val[3.2,] 	 SYMBOL:	 ARGS:haystack_val,
		 2: RETURN %cl_1_9[7.1,] %self[2.0,] 
BB 8
	outgoing: 11 
	datadep: 
	instructions:
		 0: RETURN %cl_1_8[6.1,] %self[2.0,] 
BB 9
	outgoing: 11 
	datadep: 
	instructions:
		 0: def_%cl_1_10 
		 1: def_%cl_1_11 %cl_1_10[9.0,] 
		 2: RETURN %cl_1_11[9.1,] %self[2.0,] 
BB 11
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: val[2.3,] haystack_val[3.2,] 
		 9: RETURN %v_3[2.8,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = object_to_hash instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_object 
		 6: 
		 7: object->instance_variables def_%v_3 object[2.5,] 	 SYMBOL:	 ARGS:
		 8: HASH- def_%v_4 
		 9: %v_3->inject def_%v_5 %v_3[2.7,] %v_4[2.8,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_4,%v_3,
CLOSURE BEGIN: var[] object[2.5,2.7,] hash[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_hash 
		 3: RECEIVEARG def_var 
		 4: COPY TYPE_CurrentScope def_%current_scope 
		 5: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: var->to_s def_%cl_1_3 var[2.3,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_StringLiteral "@" def_%cl_1_4 
		 3: %cl_1_3->delete def_%cl_1_5 %cl_1_3[3.1,] %cl_1_4[3.2,] 	 SYMBOL:	 ARGS:%cl_1_4,
		 4: object->instance_variable_get def_%cl_1_6 object[] var[3.1,2.3,] 	 SYMBOL:	 ARGS:var,
		 5: ATTRASSIGN hash->[] %cl_1_5[3.3,] %cl_1_6[3.4,] 
		 6: 
		 7: RETURN hash[3.5,2.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_7 
		 1: def_%cl_1_8 %cl_1_7[4.0,] 
		 2: RETURN %cl_1_8[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: var[2.3,] 
		 10: RETURN %v_5[2.9,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = wrap_if_present instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_key 
		 6: RECEIVEARG def_value 
		 7: 
		 8: %self->Maybe def_%v_3 %self[2.0,] value[2.6,] 	 SYMBOL:	 ARGS:value,
		 9: %v_3->map def_%v_4 %v_3[2.8,] %self[2.0,2.8,] 	 SYMBOL:	 ARGS:%v_3,
CLOSURE BEGIN: key[2.5,] v[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_v 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: (Hash) def_%cl_1_3 
		 2: %cl_1_3->[] def_%cl_1_4 %cl_1_3[3.1,] key[] v[2.2,] 	 SYMBOL:	 ARGS:key,v,
		 3: RETURN %cl_1_4[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[4.0,] 
		 2: RETURN %cl_1_6[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 10: HASH- def_%v_5 
		 11: %v_4->or_else def_%v_6 %v_4[2.9,] %v_5[2.10,] 	 SYMBOL:	 ARGS:%v_5,
		 12: RETURN %v_6[2.11,] %self[2.0,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = transpose instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_x 
		 6: 
		 7: HASH- def_%v_3 
		 8: x->reduce def_%v_4 x[2.5,] %v_3[2.7,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_3,x,
CLOSURE BEGIN: value[] %self[2.0,] acc[] v[] key[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_acc 
		 3: RECEIVEARG def_%cl_1_1 
		 4: def_%cl_1_2 %cl_1_1[2.3,] 
		 5: def_key %cl_1_2[2.4,] 
		 6: def_value %cl_1_2[2.4,] 
		 7: COPY TYPE_CurrentScope def_%current_scope 
		 8: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: value->each def_%cl_1_5 value[2.6,] %self[2.0,] 	 SYMBOL:	 ARGS:value,
CLOSURE BEGIN: acc[2.2,] v[] key[2.5,] 
BB 1
	outgoing: 8 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_2_0 
		 2: RECEIVEARG def_v 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 6 
	datadep: 
	instructions:
		 0: 
		 1: acc->[] def_%cl_2_3 acc[] v[2.2,] 	 SYMBOL:	 ARGS:v,
		 2: BRANCH %cl_2_3[3.1,] 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: (Set) def_%cl_2_4 
		 1: %cl_2_4->new def_%cl_2_5 %cl_2_4[4.0,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_PASS def_%cl_2_3 %cl_2_5[4.1,] 
BB 5
	outgoing: 6 8 
	datadep: 
	instructions:
		 0: %cl_2_3-><< def_%cl_2_6 %cl_2_3[4.2,3.1,] key[] 	 SYMBOL:	 ARGS:key,
		 1: ATTRASSIGN acc->[] v[2.2,] %cl_2_6[5.0,] 
		 2: RETURN %cl_2_6[5.0,] %self[2.0,] 
BB 6
	outgoing: 8 
	datadep: 
	instructions:
		 0: def_%cl_2_7 
		 1: def_%cl_2_8 %cl_2_7[6.0,] 
		 2: RETURN %cl_2_8[6.1,] %self[2.0,] 
BB 8
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 2: 
		 3: RETURN acc[2.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_6 
		 1: def_%cl_1_7 %cl_1_6[4.0,] 
		 2: RETURN %cl_1_7[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: value[2.6,] key[2.5,] 
		 9: %v_4->map def_%v_5 %v_4[2.8,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_4,
CLOSURE BEGIN: v[] k[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_3_0 
		 2: RECEIVEARG def_%cl_3_1 
		 3: def_%cl_3_2 %cl_3_1[2.2,] 
		 4: def_k %cl_3_2[2.3,] 
		 5: def_v %cl_3_2[2.3,] 
		 6: COPY TYPE_CurrentScope def_%current_scope 
		 7: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: v->to_a def_%cl_3_5 v[2.5,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_Array def_%cl_3_6 k[2.4,] %cl_3_5[3.1,] 
		 3: RETURN %cl_3_6[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_3_7 
		 1: def_%cl_3_8 %cl_3_7[4.0,] 
		 2: RETURN %cl_3_8[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.5,] 
		 10: %v_5->to_h def_%v_6 %v_5[2.9,] 	 SYMBOL:	 ARGS:
		 11: RETURN %v_6[2.10,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = flatten instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_h 
		 6: 
		 7: def_%v_3 %self[2.0,] 
CLOSURE BEGIN: hash[] %self[2.0,] k[] key_s[] prefix[] v[] acc[] prefixed_key[] memo[] 
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 5 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: RECEIVEARG def_prefix 
		 5: RECEIVEARG def_hash 
		 6: 
		 7: HASH- def_%cl_1_3 
		 8: hash->inject def_%cl_1_4 hash[2.5,] %cl_1_3[2.7,] %self[2.0,] 	 SYMBOL:	 ARGS:%cl_1_3,hash,
CLOSURE BEGIN: k[] key_s[] %self[2.0,] prefix[2.4,] v[] acc[] prefixed_key[] memo[] 
BB 1
	outgoing: 17 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 15 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_2_0 
		 2: RECEIVEARG def_memo 
		 3: RECEIVEARG def_%cl_2_1 
		 4: def_%cl_2_2 %cl_2_1[2.3,] 
		 5: def_k %cl_2_2[2.4,] 
		 6: def_v %cl_2_2[2.4,] 
		 7: COPY TYPE_CurrentScope def_%current_scope 
		 8: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 15 
	datadep: 
	instructions:
		 0: 
		 1: k->to_s def_%cl_2_5 k[2.5,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_PASS def_key_s %cl_2_5[3.1,] 
		 3: 
		 4: (Symbol) def_%cl_2_6 
		 5: k->is_a? def_%cl_2_7 k[3.1,2.5,] %cl_2_6[3.4,] 	 SYMBOL:	 ARGS:%cl_2_6,
		 6: %cl_2_7->! def_%cl_2_8 %cl_2_7[3.5,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %cl_2_8[3.6,] 
BB 4
	outgoing: 5 15 
	datadep: 
	instructions:
		 0: COPY TYPE_StringLiteral "." def_%cl_2_9 
		 1: key_s->include? def_%cl_2_10 key_s[3.2,] %cl_2_9[4.0,] 	 SYMBOL:	 ARGS:%cl_2_9,
		 2: COPY TYPE_PASS def_%cl_2_8 %cl_2_10[4.1,] 
BB 5
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: BRANCH %cl_2_8[4.2,3.6,] 
BB 6
	outgoing: 8 15 
	datadep: 
	instructions:
		 0: 
		 1: (ArgumentError) def_%cl_2_11 
		 2: COPY TYPE_StringLiteral "Key must be a Symbol and must not contain dot (.). Was: '" def_%cl_2_12 
		 3: k->to_s def_%cl_2_13 k[2.5,] 	 SYMBOL:	 ARGS:
		 4: COPY TYPE_StringLiteral "', (" def_%cl_2_14 
		 5: k->class def_%cl_2_15 k[6.3,2.5,] 	 SYMBOL:	 ARGS:
		 6: %cl_2_15->name def_%cl_2_16 %cl_2_15[6.5,] 	 SYMBOL:	 ARGS:
		 7: COPY TYPE_StringLiteral ")" def_%cl_2_17 
		 8: BUILDSTRING def_%cl_2_18 %cl_2_12[6.2,] %cl_2_13[6.3,] %cl_2_14[6.4,] %cl_2_16[6.6,] %cl_2_17[6.7,] 
		 9: %cl_2_11->new def_%cl_2_19 %cl_2_11[6.1,] %cl_2_18[6.8,] 	 SYMBOL:	 ARGS:%cl_2_18,
		 10: %self->raise def_%cl_2_20 %self[2.0,] %cl_2_19[6.9,] 	 SYMBOL:	 ARGS:%cl_2_19,
		 11: 
BB 7
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%cl_2_20 
BB 8
	outgoing: 9 10 15 
	datadep: 
	instructions:
		 0: 
		 1: prefix->nil? def_%cl_2_21 prefix[] 	 SYMBOL:	 ARGS:
		 2: BRANCH %cl_2_21[8.1,] 
BB 9
	outgoing: 11 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_%cl_2_22 k[2.5,] 
		 1: 
BB 10
	outgoing: 11 15 
	datadep: 
	instructions:
		 0: prefix->to_s def_%cl_2_23 prefix[] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_Array def_%cl_2_24 %cl_2_23[10.0,] key_s[3.2,] 
		 2: COPY TYPE_StringLiteral "." def_%cl_2_25 
		 3: %cl_2_24->join def_%cl_2_26 %cl_2_24[10.1,] %cl_2_25[10.2,] 	 SYMBOL:	 ARGS:%cl_2_25,
		 4: COPY TYPE_PASS def_%cl_2_22 %cl_2_26[10.3,] 
BB 11
	outgoing: 12 13 15 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_prefixed_key %cl_2_22[10.4,9.0,] 
		 1: 
		 2: (Hash) def_%cl_2_27 
		 3: v->is_a? def_%cl_2_28 v[2.6,] %cl_2_27[11.2,] 	 SYMBOL:	 ARGS:%cl_2_27,
		 4: BRANCH %cl_2_28[11.3,] 
BB 12
	outgoing: 14 15 
	datadep: 
	instructions:
		 0: 
		 1: acc->call def_%cl_2_29 acc[] prefixed_key[11.0,] v[2.6,] 	 SYMBOL:	 ARGS:prefixed_key,v,
		 2: memo->merge def_%cl_2_30 memo[2.2,] %cl_2_29[12.1,] 	 SYMBOL:	 ARGS:%cl_2_29,
		 3: 
BB 13
	outgoing: 15 17 
	datadep: 
	instructions:
		 0: 
		 1: prefixed_key->to_sym def_%cl_2_31 prefixed_key[11.0,] 	 SYMBOL:	 ARGS:
		 2: HASH- def_%cl_2_32 %cl_2_31[13.1,] v[2.6,] 
		 3: memo->merge def_%cl_2_33 memo[2.2,] %cl_2_32[13.2,] 	 SYMBOL:	 ARGS:%cl_2_32,
		 4: RETURN %cl_2_33[13.3,] %self[2.0,] 
BB 14
	outgoing: 17 
	datadep: 
	instructions:
		 0: RETURN %cl_2_30[12.2,] %self[2.0,] 
BB 15
	outgoing: 17 
	datadep: 
	instructions:
		 0: def_%cl_2_34 
		 1: def_%cl_2_35 %cl_2_34[15.0,] 
		 2: RETURN %cl_2_35[15.1,] %self[2.0,] 
BB 17
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: key_s[3.2,] v[2.6,] k[2.5,] prefixed_key[11.0,] 
		 9: RETURN %cl_1_4[2.8,] %self[2.0,] 
BB 3
	outgoing: 5 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[3.0,] 
		 2: RETURN %cl_1_6[3.1,] %self[2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: hash[2.5,] 
		 8: COPY TYPE_PASS def_acc %v_3[2.7,] 
		 9: 
		 10: %v_3->call def_%v_4 %v_3[2.7,] h[2.5,] 	 SYMBOL:	 ARGS:Nil,h,
		 11: RETURN %v_4[2.10,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

