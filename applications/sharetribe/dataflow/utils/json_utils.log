SET IRMethod, name = symbolize_keys instanceMethod = true
BB 1
	outgoing: 15 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_parsed_json 
		 6: RECEIVECONSTARG def_type_hint 
		 7: type_hint[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_type_hint 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: 
		 1: (Array) def_%v_3 
		 2: type_hint->== def_%v_4 type_hint[3.0,2.6,] %v_3[4.1,] 	 SYMBOL:	 ARGS:%v_3,
		 3: BRANCH %v_4[4.2,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: (Array) def_%v_5 
		 1: parsed_json->is_a? def_%v_6 parsed_json[2.5,] %v_5[5.0,] 	 SYMBOL:	 ARGS:%v_5,
		 2: COPY TYPE_PASS def_%v_4 %v_6[5.1,] 
BB 6
	outgoing: 7 8 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_is_array %v_4[5.2,4.2,] 
		 1: 
		 2: (Hash) def_%v_7 
		 3: type_hint->== def_%v_8 type_hint[3.0,2.6,] %v_7[6.2,] 	 SYMBOL:	 ARGS:%v_7,
		 4: BRANCH %v_8[6.3,] 
BB 7
	outgoing: 8 
	datadep: 
	instructions:
		 0: (Hash) def_%v_9 
		 1: parsed_json->is_a? def_%v_10 parsed_json[2.5,] %v_9[7.0,] 	 SYMBOL:	 ARGS:%v_9,
		 2: COPY TYPE_PASS def_%v_8 %v_10[7.1,] 
BB 8
	outgoing: 9 10 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_is_hash %v_8[7.2,6.3,] 
		 1: 
		 2: BRANCH %v_8[7.2,6.3,] 
BB 9
	outgoing: 15 
	datadep: 
	instructions:
		 0: 
		 1: (Hash) def_%v_11 
		 2: parsed_json->map def_%v_12 parsed_json[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:parsed_json,
CLOSURE BEGIN: k[] %self[2.0,] v[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_%cl_1_1 
		 3: def_%cl_1_2 %cl_1_1[2.2,] 
		 4: def_k %cl_1_2[2.3,] 
		 5: def_v %cl_1_2[2.3,] 
		 6: COPY TYPE_CurrentScope def_%current_scope 
		 7: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: k->to_sym def_%cl_1_5 k[2.4,] 	 SYMBOL:	 ARGS:
		 2: %self->symbolize_value_keys def_%cl_1_6 %self[2.0,] v[2.5,] 	 SYMBOL:	 ARGS:v,
		 3: COPY TYPE_Array def_%cl_1_7 %cl_1_5[3.1,] %cl_1_6[3.2,] 
		 4: RETURN %cl_1_7[3.3,] %self[3.2,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_8 
		 1: def_%cl_1_9 %cl_1_8[4.0,] 
		 2: RETURN %cl_1_9[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: v[2.5,] 
		 3: %v_11->[] def_%v_13 %v_11[9.1,] %v_12[9.2,] 	 SYMBOL:	 ARGS:%v_12,
		 4: RETURN %v_13[9.3,] %self[2.0,] 
BB 10
	outgoing: 11 12 
	datadep: 
	instructions:
		 0: 
		 1: BRANCH is_array[6.0,] 
BB 11
	outgoing: 13 
	datadep: 
	instructions:
		 0: 
		 1: parsed_json->map def_%v_14 parsed_json[2.5,] %self[2.0,] 	 SYMBOL:	 ARGS:parsed_json,
CLOSURE BEGIN: %self[2.0,] v[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_2_0 
		 2: RECEIVEARG def_v 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: %self->symbolize_value_keys def_%cl_2_3 %self[2.0,] v[2.2,] 	 SYMBOL:	 ARGS:v,
		 2: RETURN %cl_2_3[3.1,] %self[3.1,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_2_4 
		 1: def_%cl_2_5 %cl_2_4[4.0,] 
		 2: RETURN %cl_2_5[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 2: 
BB 12
	outgoing: 13 
	datadep: 
	instructions:
		 0: 
		 1: (ArgumentError) def_%v_15 
		 2: COPY TYPE_StringLiteral "Argument has to be either Array or Hash. Was " def_%v_16 
		 3: COPY TYPE_StringLiteral " (" def_%v_17 
		 4: parsed_json->class def_%v_18 parsed_json[2.5,] 	 SYMBOL:	 ARGS:
		 5: %v_18->name def_%v_19 %v_18[12.4,] 	 SYMBOL:	 ARGS:
		 6: COPY TYPE_StringLiteral ")" def_%v_20 
		 7: BUILDSTRING def_%v_21 %v_16[12.2,] parsed_json[12.4,2.5,] %v_17[12.3,] %v_19[12.5,] %v_20[12.6,] 
		 8: %v_15->new def_%v_22 %v_15[12.1,] %v_21[12.7,] 	 SYMBOL:	 ARGS:%v_21,
		 9: %self->raise def_%v_23 %self[2.0,] %v_22[12.8,] 	 SYMBOL:	 ARGS:%v_22,
		 10: COPY TYPE_PASS def_%v_14 %v_23[12.9,] 
BB 13
	outgoing: 15 
	datadep: 
	instructions:
		 0: RETURN %v_14[12.10,11.1,] %self[2.0,] 
BB 15
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = symbolize_value_keys instanceMethod = true
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_v 
		 6: 
		 7: %self->collection_type def_%v_3 %self[2.0,] v[2.5,] 	 SYMBOL:	 ARGS:v,
		 8: COPY TYPE_PASS def_v_type %v_3[2.7,] 
		 9: 
		 10: %self->should_traverse? def_%v_4 %self[2.0,2.7,] %v_3[2.7,] 	 SYMBOL:	 ARGS:v_type,
		 11: BRANCH %v_4[2.10,] 
BB 3
	outgoing: 6 
	datadep: 
	instructions:
		 0: %self->symbolize_keys def_%v_5 %self[2.0,] v[2.5,] v_type[2.8,] 	 SYMBOL:	 ARGS:v,v_type,
		 1: RETURN %v_5[3.0,] %self[3.0,2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: RETURN v[2.5,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = collection_type instanceMethod = true
BB 1
	outgoing: 9 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_v 
		 6: 
		 7: (Hash) def_%v_3 
		 8: v->is_a? def_%v_4 v[2.5,] %v_3[2.7,] 	 SYMBOL:	 ARGS:%v_3,
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 9 
	datadep: 
	instructions:
		 0: 
		 1: (Hash) def_%v_5 
		 2: RETURN %v_5[3.1,] %self[2.0,] 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: (Array) def_%v_6 
		 1: v->is_a? def_%v_7 v[2.5,] %v_6[4.0,] 	 SYMBOL:	 ARGS:%v_6,
		 2: BRANCH %v_7[4.1,] 
BB 5
	outgoing: 7 
	datadep: 
	instructions:
		 0: 
		 1: (Array) def_%v_8 
		 2: 
BB 6
	outgoing: 7 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_Nil def_%v_8 
BB 7
	outgoing: 9 
	datadep: 
	instructions:
		 0: RETURN %v_8[6.1,5.1,] %self[2.0,] 
BB 9
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = should_traverse? instanceMethod = true
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVEARG def_type 
		 6: 
		 7: (Hash) def_%v_3 
		 8: type->== def_%v_4 type[2.5,] %v_3[2.7,] 	 SYMBOL:	 ARGS:%v_3,
		 9: BRANCH %v_4[2.8,] 
BB 3
	outgoing: 5 
	datadep: 
	instructions:
		 0: (Array) def_%v_5 
		 1: type->== def_%v_6 type[2.5,] %v_5[3.0,] 	 SYMBOL:	 ARGS:%v_5,
		 2: RETURN %v_6[3.1,] %self[2.0,] 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: RETURN %v_4[2.8,] %self[2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:

