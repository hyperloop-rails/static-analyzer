SET IRMethod, name = is_rtl? instanceMethod = true
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->strip def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->empty? def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: BRANCH %v_4[2.7,] 
BB 3
	outgoing: 10 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 4
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_5 
		 1: 
		 2: COPY TYPE_Fixnum def_count 
		 3: 
		 4: COPY TYPE_StringLiteral " " def_%v_6 
		 5: %self->split def_%v_7 %self[2.0,] %v_6[4.4,] 	 SYMBOL:	 ARGS:%v_6,
		 6: %v_7->each def_%v_8 %v_7[4.5,] %self[4.5,2.0,] 	 SYMBOL:	 ARGS:%v_7,
CLOSURE BEGIN: %self[4.5,2.0,] word[] count[4.2,] 
BB 1
	outgoing: 9 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_word 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 7 
	datadep: 
	instructions:
		 0: 
		 1: %self->starts_with_rtl_char? def_%cl_1_3 %self[2.0,] word[2.2,] 	 SYMBOL:	 ARGS:word,
		 2: BRANCH %cl_1_3[3.1,] 
BB 4
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: 
		 1: count->+ def_%cl_1_4 count[] 	 SYMBOL:	 ARGS:Fixnum,
		 2: COPY TYPE_PASS def_count %cl_1_4[4.1,] 
		 3: 
BB 5
	outgoing: 7 9 
	datadep: 
	instructions:
		 0: 
		 1: count->- def_%cl_1_5 count[] 	 SYMBOL:	 ARGS:Fixnum,
		 2: COPY TYPE_PASS def_count %cl_1_5[5.1,] 
		 3: RETURN %cl_1_5[5.1,] %self[2.0,] 
BB 6
	outgoing: 9 
	datadep: 
	instructions:
		 0: RETURN %cl_1_4[4.1,] %self[2.0,] 
BB 7
	outgoing: 9 
	datadep: 
	instructions:
		 0: def_%cl_1_6 
		 1: def_%cl_1_7 %cl_1_6[7.0,] 
		 2: RETURN %cl_1_7[7.1,] %self[2.0,] 
BB 9
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: count[5.2,4.2,] 
		 7: 
		 8: count->> def_%v_9 count[4.2,4.6,] 	 SYMBOL:	 ARGS:Fixnum,
		 9: BRANCH %v_9[4.8,] 
BB 6
	outgoing: 10 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 7
	outgoing: 10 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_10 
		 1: 
		 2: %self->starts_with_rtl_char? def_%v_11 %self[2.0,] %self[2.0,] 	 SYMBOL:	 ARGS:%self,
		 3: RETURN %v_11[7.2,] %self[7.2,2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = cleaned_is_rtl? instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: (String) def_%v_3 
		 7: %v_3->new def_%v_4 %v_3[2.6,] %self[2.0,] 	 SYMBOL:	 ARGS:%self,
		 8: COPY TYPE_PASS def_string %v_4[2.7,] 
		 9: 
		 10: (RTL_CLEANER_REGEXES) def_%v_5 
		 11: %v_5->each def_%v_6 %v_5[2.10,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_5,
CLOSURE BEGIN: string[2.8,] cleaner[] 
BB 1
	outgoing: 6 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_cleaner 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 6 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "" def_%cl_1_3 
		 2: string->gsub! def_%cl_1_4 string[] cleaner[2.2,] %cl_1_3[3.1,] 	 SYMBOL:	 ARGS:cleaner,%cl_1_3,
		 3: RETURN %cl_1_4[3.2,] %self[2.0,] 
BB 4
	outgoing: 6 
	datadep: 
	instructions:
		 0: def_%cl_1_5 
		 1: def_%cl_1_6 %cl_1_5[4.0,] 
		 2: RETURN %cl_1_6[4.1,] %self[2.0,] 
BB 6
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 12: 
		 13: string->is_rtl? def_%v_7 string[2.8,] 	 SYMBOL:	 ARGS:
		 14: RETURN %v_7[2.13,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = starts_with_rtl_char? instanceMethod = true
BB 1
	outgoing: 12 2 
	datadep: 
	instructions:
BB 2
	outgoing: 4 5 10 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: RECEIVECONSTARG def_string 
		 6: string[2.5,] 
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: COPY TYPE_PASS def_string %self[2.0,] 
BB 5
	outgoing: 6 7 10 
	datadep: 
	instructions:
		 0: 
		 1: string->strip def_%v_3 string[4.0,2.5,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_PASS def_stripped %v_3[5.1,] 
		 3: 
		 4: %v_3->empty? def_%v_4 %v_3[5.1,] 	 SYMBOL:	 ARGS:
		 5: BRANCH %v_4[5.4,] 
BB 6
	outgoing: 12 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 7
	outgoing: 8 
	datadep: 
	instructions:
		 0: COPY TYPE_Nil def_%v_5 
BB 8
	outgoing: 10 12 
	datadep: 
	instructions:
		 0: 
		 1: COPY TYPE_StringLiteral "U*" def_%v_6 
		 2: stripped->unpack def_%v_7 stripped[5.2,] %v_6[8.1,] 	 SYMBOL:	 ARGS:%v_6,
		 3: %v_7->first def_%v_8 %v_7[8.2,] 	 SYMBOL:	 ARGS:
		 4: COPY TYPE_PASS def_char %v_8[8.3,] 
		 5: 
		 6: (RTL_RANGES) def_%v_9 
		 7: %v_9->each def_%v_10 %v_9[8.6,] %self[2.0,] 	 SYMBOL:	 ARGS:%v_9,
CLOSURE BEGIN: limit[] char[8.4,] 
BB 1
	outgoing: 11 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%cl_1_0 
		 2: RECEIVEARG def_limit 
		 3: COPY TYPE_CurrentScope def_%current_scope 
		 4: COPY TYPE_ScopeModule def_%current_module 
BB 3
	outgoing: 4 5 9 
	datadep: 
	instructions:
		 0: 
		 1: limit->[] def_%cl_1_3 limit[2.2,] 	 SYMBOL:	 ARGS:Fixnum,
		 2: char->>= def_%cl_1_4 char[] %cl_1_3[3.1,] 	 SYMBOL:	 ARGS:%cl_1_3,
		 3: BRANCH %cl_1_4[3.2,] 
BB 4
	outgoing: 5 9 
	datadep: 
	instructions:
		 0: limit->[] def_%cl_1_5 limit[2.2,] 	 SYMBOL:	 ARGS:Fixnum,
		 1: char-><= def_%cl_1_6 char[3.2,] %cl_1_5[4.0,] 	 SYMBOL:	 ARGS:%cl_1_5,
		 2: COPY TYPE_PASS def_%cl_1_4 %cl_1_6[4.1,] 
BB 5
	outgoing: 6 7 
	datadep: 
	instructions:
		 0: BRANCH %cl_1_4[4.2,3.2,] 
BB 6
	outgoing: 9 11 
	datadep: 
	instructions:
		 0: 
		 1: RETURN %self[2.0,] 
BB 7
	outgoing: 11 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 9
	outgoing: 11 
	datadep: 
	instructions:
		 0: def_%cl_1_8 
		 1: def_%cl_1_9 %cl_1_8[9.0,] 
		 2: RETURN %cl_1_9[9.1,] %self[2.0,] 
BB 11
	outgoing: 
	datadep: 
	instructions:
CLOSURE END: 
		 8: 
		 9: RETURN %self[2.0,] 
BB 10
	outgoing: 12 
	datadep: 
	instructions:
		 0: def_%v_11 
		 1: def_%v_12 %v_11[10.0,] 
		 2: RETURN %v_12[10.1,] %self[2.0,] 
BB 12
	outgoing: 
	datadep: 
	instructions:

