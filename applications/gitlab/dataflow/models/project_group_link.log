SET IRMethod, name = access_options instanceMethod = false
BB 1
	outgoing: 5 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: (Gitlab) def_%v_3 
		 7: (inherit Access) def_%v_4 %v_3[2.6,] 
		 8: %v_4[2.7,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %v_3->const_missing def_%v_4 %v_3[2.6,] 	 SYMBOL:Access,	 ARGS:Symbol,
BB 4
	outgoing: 5 
	datadep: 
	instructions:
		 0: %v_4->options def_%v_5 %v_4[3.0,2.7,] 	 SYMBOL:	 ARGS:
		 1: RETURN %v_5[4.0,] %self[2.0,] 
BB 5
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = default_access instanceMethod = false
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: (DEVELOPER) def_%v_3 
		 7: RETURN %v_3[2.6,] %self[2.0,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = human_access instanceMethod = true
BB 1
	outgoing: 3 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->class def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: %v_3->access_options def_%v_4 %v_3[2.6,] 	 SYMBOL:	 ARGS:
		 8: %self->group_access def_%v_5 %self[2.0,2.6,] 	 SYMBOL:	 ARGS:
		 9: %v_4->key def_%v_6 %v_4[2.7,] %v_5[2.8,] 	 SYMBOL:	 ARGS:%v_5,
		 10: RETURN %v_6[2.9,] %self[2.0,2.6,2.8,] 
BB 3
	outgoing: 
	datadep: 
	instructions:

SET IRMethod, name = different_group instanceMethod = true
BB 1
	outgoing: 10 2 
	datadep: 
	instructions:
BB 2
	outgoing: 3 4 
	datadep: 
	instructions:
		 0: def_%self 
		 1: def_%v_0 
		 2: COPY TYPE_CurrentScope def_%current_scope 
		 3: COPY TYPE_ScopeModule def_%current_module 
		 4: 
		 5: 
		 6: %self->group def_%v_3 %self[2.0,] 	 SYMBOL:	 ARGS:
		 7: BRANCH %v_3[2.6,] 
BB 3
	outgoing: 4 
	datadep: 
	instructions:
		 0: %self->project def_%v_4 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: COPY TYPE_PASS def_%v_3 %v_4[3.0,] 
BB 4
	outgoing: 5 6 
	datadep: 
	instructions:
		 0: BRANCH %v_3[3.1,2.6,] 
BB 5
	outgoing: 6 
	datadep: 
	instructions:
		 0: %self->project def_%v_5 %self[2.0,] 	 SYMBOL:	 ARGS:
		 1: %v_5->group def_%v_6 %v_5[5.0,] 	 SYMBOL:	 ARGS:
		 2: %self->group def_%v_7 %self[5.0,2.0,] 	 SYMBOL:	 ARGS:
		 3: %v_6->== def_%v_8 %v_6[5.1,] %v_7[5.2,] 	 SYMBOL:	 ARGS:%v_7,
		 4: COPY TYPE_PASS def_%v_3 %v_8[5.3,] 
BB 6
	outgoing: 7 8 
	datadep: 
	instructions:
		 0: BRANCH %v_3[5.4,3.1,2.6,] 
BB 7
	outgoing: 10 
	datadep: 
	instructions:
		 0: 
		 1: %self->errors def_%v_9 %self[2.0,] 	 SYMBOL:	 ARGS:
		 2: COPY TYPE_StringLiteral "Project cannot be shared with the project it is in." def_%v_10 
		 3: %v_9->add def_%v_11 %v_9[7.1,] %v_10[7.2,] 	 SYMBOL:base,	 ARGS:Symbol,%v_10,
		 4: RETURN %v_11[7.3,] %self[7.1,2.0,] 
BB 8
	outgoing: 10 
	datadep: 
	instructions:
		 0: RETURN %self[2.0,] 
BB 10
	outgoing: 
	datadep: 
	instructions:

